// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package ibc

import (
	"fmt"
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

// TestRun tests the Run function of the precompile contract.
// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
func TestPortDefault(t *testing.T) {
	tests := map[string]testutils.PrecompileTest{
		"readOnly bindPort should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput string
				input, err := PackBindPort(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: BindPortGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for bindPort should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput string
				input, err := PackBindPort(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: BindPortGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
	}
	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			test.Run(t, Module, state.NewTestStateDB(t))
		})
	}
}

func TestPort(t *testing.T) {
	moduleName := "testModule"

	tests := map[string]testutils.PrecompileTest{
		"Port already bound": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				input, err := PackBindPort(moduleName)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: BindPortGasCost,
			ReadOnly:    false,
			ExpectedErr: fmt.Sprintf("port with portID: %s already bound", moduleName),
		},
	}
	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			db := state.NewTestStateDB(t)
			db.SetPrecompileState(common.BytesToAddress([]byte(moduleName)), []byte("some_address"))
			test.Run(t, Module, db)
		})
	}
}

// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package ibc

import (
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

// TestRun tests the Run function of the precompile contract.
// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
func TestRun(t *testing.T) {
	tests := map[string]testutils.PrecompileTest{
		"readOnly chanOpenInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChanOpenInitInput{}
				input, err := PackChanOpenInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChanOpenInitGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for chanOpenInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChanOpenInitInput{}
				input, err := PackChanOpenInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChanOpenInitGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly chanOpenTry should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChanOpenTryInput{}
				input, err := PackChanOpenTry(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChanOpenTryGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for chanOpenTry should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChanOpenTryInput{}
				input, err := PackChanOpenTry(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChanOpenTryGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly channelCloseConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelCloseConfirmInput{}
				input, err := PackChannelCloseConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelCloseConfirmGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for channelCloseConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelCloseConfirmInput{}
				input, err := PackChannelCloseConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelCloseConfirmGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly channelCloseInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelCloseInitInput{}
				input, err := PackChannelCloseInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelCloseInitGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for channelCloseInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelCloseInitInput{}
				input, err := PackChannelCloseInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelCloseInitGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly channelOpenAck should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelOpenAckInput{}
				input, err := PackChannelOpenAck(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelOpenAckGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for channelOpenAck should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelOpenAckInput{}
				input, err := PackChannelOpenAck(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelOpenAckGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly channelOpenConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelOpenConfirmInput{}
				input, err := PackChannelOpenConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelOpenConfirmGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for channelOpenConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ChannelOpenConfirmInput{}
				input, err := PackChannelOpenConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ChannelOpenConfirmGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly connOpenAck should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenAckInput{}
				input, err := PackConnOpenAck(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenAckGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for connOpenAck should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenAckInput{}
				input, err := PackConnOpenAck(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenAckGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly connOpenConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenConfirmInput{}
				input, err := PackConnOpenConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenConfirmGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for connOpenConfirm should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenConfirmInput{}
				input, err := PackConnOpenConfirm(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenConfirmGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly connOpenInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenInitInput{}
				input, err := PackConnOpenInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenInitGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for connOpenInit should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenInitInput{}
				input, err := PackConnOpenInit(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenInitGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly connOpenTry should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenTryInput{}
				input, err := PackConnOpenTry(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenTryGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for connOpenTry should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ConnOpenTryInput{}
				input, err := PackConnOpenTry(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ConnOpenTryGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly createClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := CreateClientInput{}
				input, err := PackCreateClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: CreateClientGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for createClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := CreateClientInput{}
				input, err := PackCreateClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: CreateClientGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly updateClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := UpdateClientInput{}
				input, err := PackUpdateClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: UpdateClientGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for updateClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := UpdateClientInput{}
				input, err := PackUpdateClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: UpdateClientGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"readOnly upgradeClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := UpgradeClientInput{}
				input, err := PackUpgradeClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: UpgradeClientGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for upgradeClient should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := UpgradeClientInput{}
				input, err := PackUpgradeClient(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: UpgradeClientGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
	}
	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			test.Run(t, Module, state.NewTestStateDB(t))
		})
	}
}
